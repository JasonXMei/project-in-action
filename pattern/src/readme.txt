一、设计模式是什么
设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易地被他人理解、保证代码可靠性。
毫无疑问，设计模式于己于人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石脉络，如同大厦的结构一样。

二、总体来说，设计模式分为3大类总共23种：
1、创建型模式，共5种(主要用于描述如何创建对象)
工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式
2、结构型模式，共7种(主要用于描述如何实现类或对象的组合)
适配器模式、装饰器模式、外观模式、桥接模式、组合模式、享元模式
3、行为型模式，共11种(主要用于描述类或对象怎样交互以及怎样分配职责)
策略模式、模板方法模式、观察者模式、迭代器模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式

三、常见的7种面向对象设计原则
1、开闭原则(Open-Closed Principle, OCP)★★★★★
开闭原则说的是，对扩展开放、对修改关闭。在程序需要进行扩展的时候，不能去修改原有的代码，这也是为了使程序的扩展性更好、易于升级和维护。
如果一个系统在扩展时只涉及到修改配置文件，而原有代码没有做任何修改，该系统即可认为是一个符合开闭原则的系统。
2、里氏代换原则(Liskov Substitution Principle, LSP)★★★★★
在软件中将一个基类对象替换成它的子类对象，程序将不会产生任何错误和异常，反过来则不成立。如果一个软件实体使用的是一个子类对象的话，那么它一定不能够使用基类对象。
里氏代换原则的程序表现就是：在程序中尽量使用基类类型来对对象进行定义，而在运行时再确定其子类类型，用子类对象来替换父类。
3、控制反转原则(Dependence Inversion Principle, DIP)★★★★★
针对接口编程，依赖于抽象而不依赖于具体
4、接口隔离原则(Interface Segregation Principle, ISP)★★☆☆☆
使用多个隔离的接口，比使用单个接口要好
5、迪米特法则(Law of Demeter,LoD)★★★☆☆
一个实体应当尽量少地与其他实体间发生相互作用，使得系统功能模块相对独立
6、合成复用原则(Composite Reuse Principle, CRP)★★★★☆
尽量使用组合/聚合的方式，而不是使用继承 
7、单一职责原则(Single Responsibility Principle, SRP)★★★★☆
一个类只负责一个功能领域中的相应职责

四、用途
(1) 设计模式来源众多专家的经验和智慧，它们是从许多优秀的软件系统中总结出的成功的、能够实现可维护性复用的设计方案，使用这些方案将可以让我们避免做一些重复性的工作，
也许我们冥思苦想得到的一个“自以为很了不起”的设计方案其实就是某一个设计模式。在时间就是金钱的今天，设计模式无疑会为有助于我们提高开发和设计效率，但它不保证一定会提高。
(2) 设计模式提供了一套通用的设计词汇和一种通用的形式来方便开发人员之间沟通和交流，使得设计方案更加通俗易懂。交流通常很耗时，任何有助于提高交流效率的东西都可以为我们节省不少时间。
无论你使用哪种编程语言，做什么类型的项目，甚至你处于一个国际化的开发团队，当面对同一个设计模式时，你和别人的理解并无二异，因为设计模式是跨语言、跨平台、跨应用、跨国界的。
(3) 大部分设计模式都兼顾了系统的可重用性和可扩展性，这使得我们可以更好地重用一些已有的设计方案、功能模块甚至一个完整的软件系统，避免我们经常做一些重复的设计、编写一些重复的代码。
此外，随着软件规模的日益增大，软件寿命的日益变长，系统的可维护性和可扩展性也越来越重要，许多设计模式将有助于提高系统的灵活性和可扩展性，
让我们在不修改或者少修改现有系统的基础上增加、删除或者替换功能模块。如果一点设计模式都不懂，我想要做到这一点恐怕还是很困难的。
(4) 合理使用设计模式并对设计模式的使用情况进行文档化，将有助于别人更快地理解系统。
(5) 最后一点对初学者很重要，学习设计模式将有助于初学者更加深入地理解面向对象思想，让你知道：如何将代码分散在几个不同的类中？为什么要有“接口”？何谓针对抽象编程？
何时不应该使用继承？如何不修改源代码增加新功能？同时还让你能够更好地阅读和理解现有类库（如JDK）与其他系统中的源代码，让你早点脱离面向对象编程的“菜鸟期”。

五、怎么学习设计模式
这个设计模式的意图是什么，它要解决一个什么问题，什么时候可以使用它；
它是如何解决的，掌握它的结构图，记住它的关键代码；
能够想到至少两个它的应用实例，一个生活中的，一个软件中的；
这个模式的优缺点是什么，在使用时要注意什么。